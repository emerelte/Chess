////////// COMPLETE BOARD //////////

  piecesOnBoard.push_back(
      new Rook(WHITE, this, matrix.at(std::make_pair('a', '1'))));
  piecesOnBoard.push_back(
      new Knight(WHITE, this, matrix.at(std::make_pair('b', '1'))));
  piecesOnBoard.push_back(
      new Bishop(WHITE, this, matrix.at(std::make_pair('c', '1'))));
  piecesOnBoard.push_back(
      new Queen(WHITE, this, matrix.at(std::make_pair('d', '1'))));
  piecesOnBoard.push_back(
      new King(WHITE, this, matrix.at(std::make_pair('e', '1'))));
  piecesOnBoard.push_back(
      new Bishop(WHITE, this, matrix.at(std::make_pair('f', '1'))));
  piecesOnBoard.push_back(
      new Knight(WHITE, this, matrix.at(std::make_pair('g', '1'))));
  piecesOnBoard.push_back(
      new Rook(WHITE, this, matrix.at(std::make_pair('h', '1'))));

  piecesOnBoard.push_back(
      new Rook(BLACK, this, matrix.at(std::make_pair('a', '8'))));
  piecesOnBoard.push_back(
      new Knight(BLACK, this, matrix.at(std::make_pair('b', '8'))));
  piecesOnBoard.push_back(
      new Bishop(BLACK, this, matrix.at(std::make_pair('c', '8'))));
  piecesOnBoard.push_back(
      new Queen(BLACK, this, matrix.at(std::make_pair('d', '8'))));
  piecesOnBoard.push_back(
      new King(BLACK, this, matrix.at(std::make_pair('e', '8'))));
  piecesOnBoard.push_back(
      new Bishop(BLACK, this, matrix.at(std::make_pair('f', '8'))));
  piecesOnBoard.push_back(
      new Knight(BLACK, this, matrix.at(std::make_pair('g', '8'))));
  piecesOnBoard.push_back(
      new Rook(BLACK, this, matrix.at(std::make_pair('h', '8'))));

  for (char i = 'a'; i <= 'h'; ++i) {
    piecesOnBoard.push_back(
        new Pawn(WHITE, this, matrix.at(std::make_pair(i, '2'))));
    piecesOnBoard.push_back(
        new Pawn(BLACK, this, matrix.at(std::make_pair(i, '7'))));
  }

///////////////////////////
